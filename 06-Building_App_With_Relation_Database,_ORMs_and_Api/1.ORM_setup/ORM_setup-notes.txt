üìí Notes ‚Äì Drizzle ORM Setup with PostgreSQL

‚úÖ Why Drizzle ORM?
ORM = Object Relational Mapper (bridge between DB & app).
Choosing an ORM is critical ‚Üí changing later means rewriting the service layer.
Prisma vs Drizzle:

Prisma
Flexible (works with MongoDB, MySQL, PostgreSQL).
Can switch DBs easily.
Drawback: sometimes inefficient joins (may run multiple queries for relations).

Drizzle
Built on top of Prisma.
More efficient query execution (optimized joins).
Best with Postgres & MySQL.
Decision: use Drizzle for performance & efficiency.

‚öôÔ∏è Setting up Drizzle ORM (Step-by-Step)
1. Project Setup
npm init -y                 # Create package.json
npm install drizzle-orm pg  # Install Drizzle ORM + Postgres driver

2. Folder Structure
project/
 ‚îú‚îÄ‚îÄ drizzle/          # ORM schema files
 ‚îÇ    ‚îî‚îÄ‚îÄ schema.js
 ‚îú‚îÄ‚îÄ db/               # Database connection
 ‚îÇ    ‚îî‚îÄ‚îÄ index.js
 ‚îú‚îÄ‚îÄ drizzle.config.js # Drizzle Kit config
 ‚îú‚îÄ‚îÄ .env              # Secrets (DB URL)
 ‚îî‚îÄ‚îÄ package.json

3. Database Connection (db/index.js)
const { drizzle } = require("drizzle-orm/node-postgres");
const { Pool } = require("pg");

const pool = new Pool({
  connectionString: process.env.DATABASE_URL, // from .env
});

const db = drizzle(pool);
module.exports = db;

4. Schema Definition (drizzle/schema.js)
const { pgTable, serial, varchar } = require("drizzle-orm/pg-core");

const users = pgTable("users", {
  id: serial("id").primaryKey(),
  name: varchar("name", { length: 255 }).notNull(),
  email: varchar("email", { length: 255 }).notNull().unique(),
});

module.exports = { users };

5. Drizzle Config (drizzle.config.js)
const { defineConfig } = require("drizzle-kit");

module.exports = defineConfig({
  dialect: "postgresql",                   // DB type
  schema: "./drizzle/schema.js",           // Schema file
  out: "./drizzle",                        // Migration output
  dbCredentials: {
    url: process.env.DATABASE_URL,         // From .env
  },
});

6. Environment Variables (.env)
DATABASE_URL=postgres://admin:admin@localhost:5432/mydb
Load .env in your app:
require("dotenv").config();

7. Apply Schema to DB (Migration)
    <--   npx drizzle-kit push   -->


Reads schema file.
Pushes schema into PostgreSQL.
Creates users table automatically.

8. UI with Drizzle Studio
   <--   npx drizzle-kit studio   -->
Opens a UI dashboard in browser.
Lets you browse DB tables & data visually.

9. Using ORM in Code

-> Select Users
const db = require("./db");
const { users } = require("./drizzle/schema");

async function getUsers() {
  const allUsers = await db.select().from(users);
  console.log(allUsers);
}
getUsers();


-> Insert User
async function createUser() {
  await db.insert(users).values({
    name: "John doe",
    email: "deo@example.com"
  });
}
createUser();

üîë Key Learnings
Drizzle ORM = efficient, modern ORM optimized for SQL DBs.
Drizzle Kit = companion tool for migrations, schema syncing, UI.
.env stores sensitive DB credentials ‚Üí never hardcode in code.

Full cycle:
Write schema.
Push schema ‚Üí DB.
Use ORM methods (insert, select, update, delete).
Converts JS objects ‚Üî SQL queries seamlessly.